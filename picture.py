# !/usr/bin/env python
# -*- coding:utf-8 -*- 

"""
author: yifeng
date  : 06.03.2022
"""
import numpy as np
import cv2
from matplotlib import pyplot as plt


# cc1 = np.array([[[1800.9988 , 1558.7712 ]],
#
#        [[1801.5607 , 1420.9989 ]],
#
#        [[1802.1343 , 1283.6256 ]],
#
#        [[1802.741  , 1147.4501 ]],
#
#        [[1803.3298 , 1011.4207 ]],
#
#        [[1661.7079 , 1558.3442 ]],
#
#        [[1662.6611 , 1420.5958 ]],
#
#        [[1663.5298 , 1283.299  ]],
#
#        [[1664.4686 , 1146.9592 ]],
#
#        [[1665.3529 , 1010.7318 ]],
#
#        [[1522.7821 , 1558.2094 ]],
#
#        [[1523.9633 , 1420.4066 ]],
#
#        [[1525.1217 , 1283.0382 ]],
#
#        [[1526.3789 , 1146.6107 ]],
#
#        [[1527.5835 , 1010.4664 ]],
#
#        [[1383.5292 , 1557.9946 ]],
#
#        [[1385.0676 , 1420.1768 ]],
#
#        [[1386.5562 , 1282.8842 ]],
#
#        [[1388.1606 , 1146.5063 ]],
#
#        [[1389.7815 , 1010.51953]],
#
#        [[1244.3438 , 1557.8981 ]],
#
#        [[1246.2388 , 1420.1682 ]],
#
#        [[1248.1227 , 1282.9985 ]],
#
#        [[1250.0894 , 1146.644  ]],
#
#        [[1252.0605 , 1010.79144]]])

cc1 = np.array([[[1768.7593 , 1048.3353 ]],

       [[1699.5786 , 1117.5253 ]],

       [[1630.6183 , 1186.6584 ]],

       [[1561.7201 , 1255.7988 ]],

       [[1493.0278 , 1324.8083 ]],

       [[1424.4684 , 1393.8777 ]],

       [[1356.1495 , 1462.7318 ]],

       [[1699.3003 ,  978.6675 ]],

       [[1630.3837 , 1047.9603 ]],

       [[1561.4106 , 1117.1875 ]],

       [[1492.6334 , 1186.3403 ]],

       [[1423.8673 , 1255.4813 ]],

       [[1355.3561 , 1324.3931 ]],

       [[1287.1143 , 1393.3687 ]],

       [[1629.9646 ,  909.0532 ]],

       [[1561.0004 ,  978.31946]],

       [[1492.1022 , 1047.523  ]],

       [[1423.3365 , 1116.7875 ]],

       [[1354.7847 , 1185.9198 ]],

       [[1286.2955 , 1255.0066 ]],

       [[1217.9788 , 1324.0396 ]],

       [[1560.49   ,  839.39075]],

       [[1491.5999 ,  908.76263]],

       [[1422.7675 ,  978.04114]],

       [[1354.1122 , 1047.2693 ]],

       [[1285.5948 , 1116.5657 ]],

       [[1217.1171 , 1185.7539 ]],

       [[1148.8492 , 1254.8044 ]],

       [[1491.0479 ,  769.8464 ]],

       [[1422.236  ,  839.2195 ]],

       [[1353.4502 ,  908.6248 ]],

       [[1284.9165 ,  977.96045]],

       [[1216.4122 , 1047.1488 ]],

       [[1147.9828 , 1116.4219 ]],

       [[1079.7295 , 1185.5696 ]],

       [[1421.4596 ,  700.31506]],

       [[1352.7368 ,  769.75616]],

       [[1283.9972 ,  839.2362 ]],

       [[1215.4762 ,  908.60333]],

       [[1146.9846 ,  977.895  ]],

       [[1078.701  , 1047.1505 ]],

       [[1010.4511 , 1116.2697 ]],

       [[1351.8519 ,  630.78784]],

       [[1283.0677 ,  700.2903 ]],

       [[1214.5464 ,  769.79846]],

       [[1146.0394 ,  839.1801 ]],

       [[1077.6676 ,  908.6091 ]],

       [[1009.265  ,  977.941  ]],

       [[ 941.1287 , 1047.1527 ]]])

c1 = np.array([[884.7476806640625, 576.9841918945312],
[888.8579711914062, 499.846435546875],
[422.3658447265625, 335.6953430175781],
[439.48162841796875, 318.6192626953125],
[405.45379638671875, 318.85546875],
[456.6275329589844, 301.5601501464844],
[422.56927490234375, 301.8192138671875],
[388.5904846191406, 302.0238342285156],
[371.7774658203125, 285.301025390625],
[473.7724914550781, 284.5364074707031],
[439.69244384765625, 284.7961120605469],
[405.6817626953125, 285.0472106933594],
[388.9080505371094, 268.327880859375],
[355.06243896484375, 268.5939025878906],
[490.91497802734375, 267.5794677734375],
[456.8190612792969, 267.8105163574219],
[422.81536865234375, 268.0766296386719],
[439.9178771972656, 251.14024353027344],
[405.9743347167969, 251.39952087402344],
[372.1207580566406, 251.6703338623047],
[338.31927490234375, 251.94615173339844],
[508.0021057128906, 250.65643310546875],
[473.9145202636719, 250.8949432373047],
[355.41204833984375, 235.0794677734375],
[321.64111328125, 235.31594848632812],
[456.9988708496094, 234.21853637695312],
[423.0523376464844, 234.5046844482422],
[389.203857421875, 234.79493713378906],
[525.1461181640625, 233.7930908203125],
[491.0430908203125, 234.00071716308594],
[372.43157958984375, 218.24078369140625],
[338.6919250488281, 218.48046875],
[508.1278991699219, 217.1737823486328],
[474.08123779296875, 217.38290405273438],
[440.1260070800781, 217.65635681152344],
[406.2815856933594, 217.94508361816406],
[423.2854309082031, 201.1298370361328],
[389.47900390625, 201.435546875],
[355.7285461425781, 201.70367431640625],
[491.15020751953125, 200.5909881591797],
[457.18927001953125, 200.8367156982422],
[440.34075927734375, 184.33917236328125],
[406.4938049316406, 184.6272735595703],
[372.74090576171875, 184.9230499267578],
[474.2084045410156, 184.04808044433594],
[389.7251892089844, 168.18637084960938],
[457.3357849121094, 167.60296630859375],
[423.4927978515625, 167.84422302246094],
[440.4757080078125, 151.17233276367188],
[406.6893615722656, 151.42417907714844],
[423.6605224609375, 134.7598419189453],
[301.4193115234375, 294.293212890625],
[1009.5975341796875, 507.6121826171875]])
# print('before', c1)
# c12 = sorted(c1, key=lambda x:(x[0], x[1]))
# print('after', np.array(c12))
#
cc1 = np.reshape(cc1, (-1, 2))
print('cc1', cc1.shape, type(cc1))
plt.scatter(cc1[:,0], cc1[:,1])
# # # print(cc1)
plt.show()
# # m = np.zeros((1, 2))
# m = np.median(c1, axis=0)
# print(m)
#
# plt.scatter(c1[:,0], c1[:,1])
# print(c1.shape, type(c1))
# # plt.plot(m[0], m[1], 'g--')
# plt.show()



# plt.scatter(cc1[:,0],cc1[:,1])
# plt.show()

# 以下不太好用
# gray = cv2.imread('C:\\Users\\wyfmi\\Desktop\\2022-02-25_Kallibrierbilder\\22-02-25_12-45-20_1.jpg', 0)
# # gray = np.uint8(np.clip((cv2.add(1 * gray, 40)), 0, 255))
# # thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 15, 3)
# thresh = cv2.threshold(gray, 25, 255, cv2.THRESH_BINARY)[1]
#
# result1 = cv2.resize(thresh, (1024, 768))
# cv2.imshow("thresh", result1)
# cv2.waitKey(30000)
#
# kernel = np.ones((5, 5), np.uint8)
# opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
# result2 = cv2.resize(opening, (1024, 768))
# cv2.imshow("thresh", result2)
# cv2.waitKey(30000)

# contours, hierarchy = cv2.findContours(gray, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
# cv2.drawContours(gray, contours, -1, (255, 0, 0), 2)
# cv2.imshow('contours', gray)
# # print(contours)
# print('contours', len(contours))
# cv2.imshow("contours", contours)
# cv2.waitKey(30000)

#
# params = cv2.SimpleBlobDetector_Params()
#
# # 通过圆率来过滤>0.7
# params.filterByCircularity = True
# params.minCircularity = 0.7
#
# params.maxArea = 200
# params.minArea = 100
#
# detector = cv2.SimpleBlobDetector_create(params)
#
# for cnt in contours:
#     (x, y, w, h) = cv2.boundingRect(cnt)
#     c_area = cv2.contourArea(cnt)
#     if c_area > 80000:
#         cv2.rectangle(gray, (x, y), (x + w, y + h), (0, 255, 0), 2)
#         roi = gray[y:y + h, x:x + w]
#         cv2.imshow("roi", roi)
#         cv2.waitKey(300)
#         keypoints = detector.detect(roi)
#         print(len(keypoints))
#
# cv2.imshow("result", gray)
# cv2.waitKey(0)
# cv2.destroyAllWindows()

# plt.figure()
# plt.plot([1169.3455, 1056, 1061, 1131, 1126], [2790.9602, 2891, 2821, 2824, 2895], 'o')
# plt.show()

# world_points = np.zeros((5 * 5, 3), np.float32)
# world_points[:, :2] = 0.15*np.mgrid[0:5, 0:5].T.reshape(-1, 2)
# print(world_points)
# reverse = sorted(world_points, key=lambda x: (-x[0], x[1]))
# reverse = np.array(reverse)
# print(reverse)
# print(type(reverse))

R = np.array([[ 9.98501062e-01, -8.39155683e-03, -5.40852254e-02],
       [-9.12067142e-04,  9.85488283e-01, -1.69741013e-01],
       [ 5.47247473e-02,  1.69535911e-01,  9.84003444e-01]])

R1 = np.array([[ 0.99861784,  0.04407819, -0.02862725],
       [-0.04333428,  0.99871947,  0.02610679],
       [ 0.02974134, -0.02483016,  0.99924918]])

R2 = np.array([[ 0.9982994 ,  0.04738696,  0.03395263],
       [-0.05306213,  0.97983447,  0.19263652],
       [-0.0241395 , -0.19411053,  0.98068261]])

# R2 = R2.T
# print(R2)
#
# R = np.dot(R1, R2)
# print(R)

imgpoints1 = np.array([[1185.1594 , 1453.5273 ],

       [1194.1455 , 1316.7181 ],

       [1203.0153 , 1180.3035 ],

       [1212.0594 , 1045.233  ],

       [1220.937  ,  910.28925],

       [1046.2645 , 1446.0652 ],

       [1055.7485 , 1309.4178 ],

       [1064.9188 , 1173.086  ],

       [1074.3706 , 1037.9368 ],

       [1083.491  ,  902.886  ],

       [ 908.0343 , 1439.1036 ],

       [ 917.77704, 1302.366  ],

       [ 927.3643 , 1166.1753 ],

       [ 936.9202 , 1030.9033 ],

       [ 946.5403 ,  895.9624 ],

       [ 769.6179 , 1431.9572 ],

       [ 779.64966, 1295.2668 ],

       [ 789.60443, 1159.2031 ],

       [ 799.7073 , 1024.1006 ],

       [ 809.70233,  889.3385 ],

       [ 631.3797 , 1425.0264 ],

       [ 641.8933 , 1288.5001 ],

       [ 652.24866, 1152.5289 ],

       [ 662.71857, 1017.5326 ],

       [ 673.16187,  883.08154]])

imgpoints2 = np.array([[ 849.8103 , 1507.5199 ],

       [ 855.6296 , 1367.6251 ],

       [ 861.2748 , 1227.6787 ],

       [ 867.2428 , 1087.9894 ],

       [ 873.1892 ,  947.9594 ],

       [ 709.3479 , 1501.4287 ],

       [ 715.1372 , 1361.5057 ],

       [ 720.7572 , 1221.5471 ],

       [ 726.64825, 1081.6578 ],

       [ 732.4287 ,  941.50684],

       [ 569.2354 , 1495.372  ],

       [ 574.8882 , 1355.3284 ],

       [ 580.49786, 1215.3391 ],

       [ 586.2596 , 1075.3422 ],

       [ 592.0674 ,  935.109  ],

       [ 428.85107, 1489.2004 ],

       [ 434.4044 , 1349.18   ],

       [ 440.0575 , 1209.0555 ],

       [ 445.91763, 1069.1207 ],

       [ 451.77582,  928.8005 ],

       [ 288.44748, 1483.0986 ],

       [ 294.14627, 1342.9836 ],

       [ 299.83737, 1202.9133 ],

       [ 305.5686 , 1062.8843 ],

       [ 311.5648 ,  922.6424 ]])

# F, mask = cv2.findFundamentalMat(imgpoints1, imgpoints2, method=cv2.FM_RANSAC,ransacReprojThreshold=0.9, confidence=0.99)
# print(F)
# print(mask)

# R1 = np.array([[ 0.99861784,  0.04407819, -0.02862725],
#        [-0.04333428,  0.99871947,  0.02610679],
#        [ 0.02974134, -0.02483016,  0.99924918]])
# R2 = np.array([[ 0.9982994 ,  0.04738696,  0.03395263],
#        [-0.05306213,  0.97983447,  0.19263652],
#        [-0.0241395 , -0.19411053,  0.98068261]])



R1 = np.array([[ 2.09777598], [-2.05236634], [ 0.26336957]])
R2 = np.array([[-2.21921355],
       [ 2.18790723],
       [-0.37235795]])

T1 = np.array([[ 1.91543892],
       [ 3.14598396],
       [11.71817355]])
T2 = np.array([[ 1.42788548],
       [ 3.01036163],
       [12.83355981]])
R1 = cv2.Rodrigues(R1)[0]
print(R1)
R2 = cv2.Rodrigues(R2)[0]
print(R2)

R = np.array([[ 9.99072609e-01, -7.59696783e-03, -4.23816963e-02],
       [ 7.46181094e-04,  9.87218611e-01, -1.59370189e-01],
       [ 4.30507295e-02,  1.59190766e-01,  9.86308742e-01]])

T = np.array([[0.01882229],
       [1.45000692],
       [0.0839646 ]])

R3 = np.matmul(R2, R1.T)
print(R3)
T3 = np.matmul(R, T1) + T
print(T3)

print("*" * 50)
R_1 = cv2.Rodrigues(np.array([[ 2.08133638], [-1.9455288 ], [ 0.18701047]]))[0]
T_1 = np.array([[-2.27248615], [ 2.16651513], [-0.20136505]])
R_2 = cv2.Rodrigues(np.array([[ 1.35800508], [ 1.66156909], [12.09564639]]))[0]
T_2 = np.array([[ 0.85029464], [ 1.5127688 ], [13.09589913]])

R_3 = np.matmul(R, R_1)
T_3 = np.dot(R, T_1) + T
print(R_3)
print(R_2)
print(T_3)
print(T_2)

print("*" * 50)
R_all = np.array([[ 0.97489324,  0.01787771, -0.22195393],
 [-0.00126376,  0.99719996,  0.07477059],
 [ 0.22266918, -0.07261285,  0.9721861 ]])
T_all = np.array([[5.10710], [-1.75768], [-0.26555]])
R_one = cv2.Rodrigues(np.array([[ 2.02244149], [-1.89395246], [ 0.2656394 ]]))[0]
T_one = np.array([[ 1.4123244 ],
       [ 1.59632851],
       [28.47819512]])
R_two = cv2.Rodrigues(np.array([[-2.23527939], [ 2.14004938], [-0.11700016]]))[0]
T_two = np.array([[ 1.04529602],
       [ 1.76632856],
       [74.99388532]])

R_three = np.matmul(R_all, R_one)
T_three = np.dot(R_all, T_one) + T_all
print(R_three)
print(R_two)
print(T_three)
print(T_two)